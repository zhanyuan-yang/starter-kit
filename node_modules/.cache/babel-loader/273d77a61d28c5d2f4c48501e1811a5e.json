{"ast":null,"code":"import { DefaultRoute } from \"../router/routes\"; // ** Checks if an object is empty (returns boolean)\n\nexport const isObjEmpty = obj => Object.keys(obj).length === 0; // ** Returns K format from a number\n\nexport const kFormatter = num => num > 999 ? `${(num / 1000).toFixed(1)}k` : num; // ** Converts HTML to string\n\nexport const htmlToString = html => html.replace(/<\\/?[^>]+(>|$)/g, \"\"); // ** Checks if the passed date is today\n\nconst isToday = date => {\n  const today = new Date();\n  return (\n    /* eslint-disable operator-linebreak */\n    date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear()\n    /* eslint-enable */\n\n  );\n};\n/**\n ** Format and return date in Humanize format\n ** Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\n ** Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\n * @param {String} value date to format\n * @param {Object} formatting Intl object to format with\n */\n\n\nexport const formatDate = function (value) {\n  let formatting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    month: \"short\",\n    day: \"numeric\",\n    year: \"numeric\"\n  };\n  if (!value) return value;\n  return new Intl.DateTimeFormat(\"en-US\", formatting).format(new Date(value));\n}; // ** Returns short month of passed date\n\nexport const formatDateToMonthShort = function (value) {\n  let toTimeForCurrentDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const date = new Date(value);\n  let formatting = {\n    month: \"short\",\n    day: \"numeric\"\n  };\n\n  if (toTimeForCurrentDay && isToday(date)) {\n    formatting = {\n      hour: \"numeric\",\n      minute: \"numeric\"\n    };\n  }\n\n  return new Intl.DateTimeFormat(\"en-US\", formatting).format(new Date(value));\n};\n/**\n ** Return if user is logged in\n ** This is completely up to you and how you want to store the token in your frontend application\n *  ? e.g. If you are using cookies to store the application please update this function\n */\n\nexport const isUserLoggedIn = () => localStorage.getItem(\"userData\");\nexport const getUserData = () => JSON.parse(localStorage.getItem(\"userData\"));\n/**\n ** This function is used for demo purpose route navigation\n ** In real app you won't need this function because your app will navigate to same route for each users regardless of ability\n ** Please note role field is just for showing purpose it's not used by anything in frontend\n ** We are checking role just for ease\n * ? NOTE: If you have different pages to navigate based on user ability then this function can be useful. However, you need to update it.\n * @param {String} userRole Role of user\n */\n\nexport const getHomeRouteForLoggedInUser = userRole => {\n  if (userRole === \"admin\") return DefaultRoute;\n  if (userRole === \"client\") return \"/access-control\";\n  return \"/login\";\n}; // ** React Select Theme Colors\n\nexport const selectThemeColors = theme => ({ ...theme,\n  colors: { ...theme.colors,\n    primary25: \"#7367f01a\",\n    // for option hover bg-color\n    primary: \"#7367f0\",\n    // for selected option bg-color\n    neutral10: \"#7367f0\",\n    // for tags bg-color\n    neutral20: \"#ededed\",\n    // for input border-color\n    neutral30: \"#ededed\" // for input hover border-color\n\n  }\n});","map":{"version":3,"names":["DefaultRoute","isObjEmpty","obj","Object","keys","length","kFormatter","num","toFixed","htmlToString","html","replace","isToday","date","today","Date","getDate","getMonth","getFullYear","formatDate","value","formatting","month","day","year","Intl","DateTimeFormat","format","formatDateToMonthShort","toTimeForCurrentDay","hour","minute","isUserLoggedIn","localStorage","getItem","getUserData","JSON","parse","getHomeRouteForLoggedInUser","userRole","selectThemeColors","theme","colors","primary25","primary","neutral10","neutral20","neutral30"],"sources":["/Users/zhanyuanyang/Desktop/react/starter-kit/src/utility/Utils.js"],"sourcesContent":["import { DefaultRoute } from \"../router/routes\"\n\n// ** Checks if an object is empty (returns boolean)\nexport const isObjEmpty = (obj) => Object.keys(obj).length === 0\n\n// ** Returns K format from a number\nexport const kFormatter = (num) => (num > 999 ? `${(num / 1000).toFixed(1)}k` : num)\n\n// ** Converts HTML to string\nexport const htmlToString = (html) => html.replace(/<\\/?[^>]+(>|$)/g, \"\")\n\n// ** Checks if the passed date is today\nconst isToday = (date) => {\n  const today = new Date()\n  return (\n    /* eslint-disable operator-linebreak */\n    date.getDate() === today.getDate() &&\n    date.getMonth() === today.getMonth() &&\n    date.getFullYear() === today.getFullYear()\n    /* eslint-enable */\n  )\n}\n\n/**\n ** Format and return date in Humanize format\n ** Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\n ** Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\n * @param {String} value date to format\n * @param {Object} formatting Intl object to format with\n */\nexport const formatDate = (\n  value,\n  formatting = { month: \"short\", day: \"numeric\", year: \"numeric\" }\n) => {\n  if (!value) return value\n  return new Intl.DateTimeFormat(\"en-US\", formatting).format(new Date(value))\n}\n\n// ** Returns short month of passed date\nexport const formatDateToMonthShort = (value, toTimeForCurrentDay = true) => {\n  const date = new Date(value)\n  let formatting = { month: \"short\", day: \"numeric\" }\n\n  if (toTimeForCurrentDay && isToday(date)) {\n    formatting = { hour: \"numeric\", minute: \"numeric\" }\n  }\n\n  return new Intl.DateTimeFormat(\"en-US\", formatting).format(new Date(value))\n}\n\n/**\n ** Return if user is logged in\n ** This is completely up to you and how you want to store the token in your frontend application\n *  ? e.g. If you are using cookies to store the application please update this function\n */\nexport const isUserLoggedIn = () => localStorage.getItem(\"userData\")\nexport const getUserData = () => JSON.parse(localStorage.getItem(\"userData\"))\n\n/**\n ** This function is used for demo purpose route navigation\n ** In real app you won't need this function because your app will navigate to same route for each users regardless of ability\n ** Please note role field is just for showing purpose it's not used by anything in frontend\n ** We are checking role just for ease\n * ? NOTE: If you have different pages to navigate based on user ability then this function can be useful. However, you need to update it.\n * @param {String} userRole Role of user\n */\nexport const getHomeRouteForLoggedInUser = (userRole) => {\n  if (userRole === \"admin\") return DefaultRoute\n  if (userRole === \"client\") return \"/access-control\"\n  return \"/login\"\n}\n\n// ** React Select Theme Colors\nexport const selectThemeColors = (theme) => ({\n  ...theme,\n  colors: {\n    ...theme.colors,\n    primary25: \"#7367f01a\", // for option hover bg-color\n    primary: \"#7367f0\", // for selected option bg-color\n    neutral10: \"#7367f0\", // for tags bg-color\n    neutral20: \"#ededed\", // for input border-color\n    neutral30: \"#ededed\" // for input hover border-color\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}