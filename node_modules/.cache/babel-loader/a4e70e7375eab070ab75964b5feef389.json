{"ast":null,"code":"var merge = require('utils-merge');\n\nfunction SessionManager(options, serializeUser) {\n  if (typeof options == 'function') {\n    serializeUser = options;\n    options = undefined;\n  }\n\n  options = options || {};\n  this._key = options.key || 'passport';\n  this._serializeUser = serializeUser;\n}\n\nSessionManager.prototype.logIn = function (req, user, options, cb) {\n  if (typeof options == 'function') {\n    cb = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  if (!req.session) {\n    return cb(new Error('Login sessions require session support. Did you forget to use `express-session` middleware?'));\n  }\n\n  var self = this;\n  var prevSession = req.session; // regenerate the session, which is good practice to help\n  // guard against forms of session fixation\n\n  req.session.regenerate(function (err) {\n    if (err) {\n      return cb(err);\n    }\n\n    self._serializeUser(user, req, function (err, obj) {\n      if (err) {\n        return cb(err);\n      }\n\n      if (options.keepSessionInfo) {\n        merge(req.session, prevSession);\n      }\n\n      if (!req.session[self._key]) {\n        req.session[self._key] = {};\n      } // store user information in session, typically a user id\n\n\n      req.session[self._key].user = obj; // save the session before redirection to ensure page\n      // load does not happen before session is saved\n\n      req.session.save(function (err) {\n        if (err) {\n          return cb(err);\n        }\n\n        cb();\n      });\n    });\n  });\n};\n\nSessionManager.prototype.logOut = function (req, options, cb) {\n  if (typeof options == 'function') {\n    cb = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  if (!req.session) {\n    return cb(new Error('Login sessions require session support. Did you forget to use `express-session` middleware?'));\n  }\n\n  var self = this; // clear the user from the session object and save.\n  // this will ensure that re-using the old session id\n  // does not have a logged in user\n\n  if (req.session[this._key]) {\n    delete req.session[this._key].user;\n  }\n\n  var prevSession = req.session;\n  req.session.save(function (err) {\n    if (err) {\n      return cb(err);\n    } // regenerate the session, which is good practice to help\n    // guard against forms of session fixation\n\n\n    req.session.regenerate(function (err) {\n      if (err) {\n        return cb(err);\n      }\n\n      if (options.keepSessionInfo) {\n        merge(req.session, prevSession);\n      }\n\n      cb();\n    });\n  });\n};\n\nmodule.exports = SessionManager;","map":{"version":3,"names":["merge","require","SessionManager","options","serializeUser","undefined","_key","key","_serializeUser","prototype","logIn","req","user","cb","session","Error","self","prevSession","regenerate","err","obj","keepSessionInfo","save","logOut","module","exports"],"sources":["/Users/zhanyuanyang/Desktop/react/starter-kit/node_modules/passport/lib/sessionmanager.js"],"sourcesContent":["var merge = require('utils-merge');\n\nfunction SessionManager(options, serializeUser) {\n  if (typeof options == 'function') {\n    serializeUser = options;\n    options = undefined;\n  }\n  options = options || {};\n  \n  this._key = options.key || 'passport';\n  this._serializeUser = serializeUser;\n}\n\nSessionManager.prototype.logIn = function(req, user, options, cb) {\n  if (typeof options == 'function') {\n    cb = options;\n    options = {};\n  }\n  options = options || {};\n  \n  if (!req.session) { return cb(new Error('Login sessions require session support. Did you forget to use `express-session` middleware?')); }\n  \n  var self = this;\n  var prevSession = req.session;\n  \n  // regenerate the session, which is good practice to help\n  // guard against forms of session fixation\n  req.session.regenerate(function(err) {\n    if (err) {\n      return cb(err);\n    }\n    \n    self._serializeUser(user, req, function(err, obj) {\n      if (err) {\n        return cb(err);\n      }\n      if (options.keepSessionInfo) {\n        merge(req.session, prevSession);\n      }\n      if (!req.session[self._key]) {\n        req.session[self._key] = {};\n      }\n      // store user information in session, typically a user id\n      req.session[self._key].user = obj;\n      // save the session before redirection to ensure page\n      // load does not happen before session is saved\n      req.session.save(function(err) {\n        if (err) {\n          return cb(err);\n        }\n        cb();\n      });\n    });\n  });\n}\n\nSessionManager.prototype.logOut = function(req, options, cb) {\n  if (typeof options == 'function') {\n    cb = options;\n    options = {};\n  }\n  options = options || {};\n  \n  if (!req.session) { return cb(new Error('Login sessions require session support. Did you forget to use `express-session` middleware?')); }\n  \n  var self = this;\n  \n  // clear the user from the session object and save.\n  // this will ensure that re-using the old session id\n  // does not have a logged in user\n  if (req.session[this._key]) {\n    delete req.session[this._key].user;\n  }\n  var prevSession = req.session;\n  \n  req.session.save(function(err) {\n    if (err) {\n      return cb(err)\n    }\n  \n    // regenerate the session, which is good practice to help\n    // guard against forms of session fixation\n    req.session.regenerate(function(err) {\n      if (err) {\n        return cb(err);\n      }\n      if (options.keepSessionInfo) {\n        merge(req.session, prevSession);\n      }\n      cb();\n    });\n  });\n}\n\n\nmodule.exports = SessionManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}