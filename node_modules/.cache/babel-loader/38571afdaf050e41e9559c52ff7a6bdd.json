{"ast":null,"code":"var _jsxFileName = \"/Users/zhanyuanyang/Desktop/react/starter-kit/src/@core/components/input-password-toggle/index.js\",\n    _s = $RefreshSig$();\n\n// ** React Imports\nimport { Fragment, useState, forwardRef } from \"react\"; // ** Third Party Components\n\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { Eye, EyeOff } from \"react-feather\"; // ** Reactstrap Imports\n\nimport { InputGroup, Input, InputGroupText, Label } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputPasswordToggle = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props; // ** State\n\n  const [inputVisibility, setInputVisibility] = useState(visible); // ** Renders Icon Based On Visibility\n\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14;\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : /*#__PURE__*/_jsxDEV(Eye, {\n        size: size\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 36\n      }, this);\n    } else {\n      return showIcon ? showIcon : /*#__PURE__*/_jsxDEV(EyeOff, {\n        size: size\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 36\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [label ? /*#__PURE__*/_jsxDEV(Label, {\n      className: \"form-label\",\n      for: htmlFor,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(InputGroup, {\n      className: classnames({\n        [className]: className,\n        \"is-invalid\": invalid\n      }),\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        ref: ref,\n        invalid: invalid,\n        type: inputVisibility === false ? \"password\" : \"text\",\n        placeholder: placeholder ? placeholder : \"············\",\n        className: classnames({\n          [inputClassName]: inputClassName\n        })\n        /*eslint-disable */\n        ,\n        ...(label && htmlFor ? {\n          id: htmlFor\n        } : {}),\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputGroupText, {\n        className: \"cursor-pointer\",\n        onClick: () => setInputVisibility(!inputVisibility),\n        children: renderIcon()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}, \"CP4M4NpEdDJ4VcmvhtakRhTfULA=\"));\n_c2 = InputPasswordToggle;\nexport default InputPasswordToggle; // ** PropTypes\n\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props[\"htmlFor\"] === \"undefined\") {\n      throw new Error(\"htmlFor prop is required when label prop is present\");\n    }\n  },\n\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props[\"label\"] === \"undefined\") {\n      throw new Error(\"label prop is required when htmlFor prop is present\");\n    }\n  }\n\n}; // ** Default Props\n\nInputPasswordToggle.defaultProps = {\n  visible: false\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InputPasswordToggle$forwardRef\");\n$RefreshReg$(_c2, \"InputPasswordToggle\");","map":{"version":3,"names":["Fragment","useState","forwardRef","PropTypes","classnames","Eye","EyeOff","InputGroup","Input","InputGroupText","Label","InputPasswordToggle","props","ref","label","hideIcon","showIcon","visible","className","htmlFor","placeholder","iconSize","inputClassName","invalid","rest","inputVisibility","setInputVisibility","renderIcon","size","id","propTypes","bool","node","string","number","propName","Error","defaultProps"],"sources":["/Users/zhanyuanyang/Desktop/react/starter-kit/src/@core/components/input-password-toggle/index.js"],"sourcesContent":["// ** React Imports\nimport { Fragment, useState, forwardRef } from \"react\"\n\n// ** Third Party Components\nimport PropTypes from \"prop-types\"\nimport classnames from \"classnames\"\nimport { Eye, EyeOff } from \"react-feather\"\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from \"reactstrap\"\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className=\"form-label\" for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          \"is-invalid\": invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? \"password\" : \"text\"}\n          placeholder={placeholder ? placeholder : \"············\"}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor,\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText\n          className=\"cursor-pointer\"\n          onClick={() => setInputVisibility(!inputVisibility)}\n        >\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props[\"htmlFor\"] === \"undefined\") {\n      throw new Error(\"htmlFor prop is required when label prop is present\")\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props[\"label\"] === \"undefined\") {\n      throw new Error(\"label prop is required when htmlFor prop is present\")\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}