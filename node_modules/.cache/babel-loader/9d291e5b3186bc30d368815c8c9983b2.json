{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar http = require('http'),\n    IncomingMessageExt = require('../http/request'),\n    AuthenticationError = require('../errors/authenticationerror');\n/**\n * Authenticates requests.\n *\n * Applies the `name`ed strategy (or strategies) to the incoming request, in\n * order to authenticate the request.  If authentication is successful, the user\n * will be logged in and populated at `req.user` and a session will be\n * established by default.  If authentication fails, an unauthorized response\n * will be sent.\n *\n * Options:\n *   - `session`          Save login state in session, defaults to _true_\n *   - `successRedirect`  After successful login, redirect to given URL\n *   - `successMessage`   True to store success message in\n *                        req.session.messages, or a string to use as override\n *                        message for success.\n *   - `successFlash`     True to flash success messages or a string to use as a flash\n *                        message for success (overrides any from the strategy itself).\n *   - `failureRedirect`  After failed login, redirect to given URL\n *   - `failureMessage`   True to store failure message in\n *                        req.session.messages, or a string to use as override\n *                        message for failure.\n *   - `failureFlash`     True to flash failure messages or a string to use as a flash\n *                        message for failures (overrides any from the strategy itself).\n *   - `assignProperty`   Assign the object provided by the verify callback to given property\n *\n * An optional `callback` can be supplied to allow the application to override\n * the default manner in which authentication attempts are handled.  The\n * callback has the following signature, where `user` will be set to the\n * authenticated user on a successful authentication attempt, or `false`\n * otherwise.  An optional `info` argument will be passed, containing additional\n * details provided by the strategy's verify callback - this could be information about\n * a successful authentication or a challenge message for a failed authentication.\n * An optional `status` argument will be passed when authentication fails - this could\n * be a HTTP response code for a remote authentication failure or similar.\n *\n *     app.get('/protected', function(req, res, next) {\n *       passport.authenticate('local', function(err, user, info, status) {\n *         if (err) { return next(err) }\n *         if (!user) { return res.redirect('/signin') }\n *         res.redirect('/account');\n *       })(req, res, next);\n *     });\n *\n * Note that if a callback is supplied, it becomes the application's\n * responsibility to log-in the user, establish a session, and otherwise perform\n * the desired operations.\n *\n * Examples:\n *\n *     passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' });\n *\n *     passport.authenticate('basic', { session: false });\n *\n *     passport.authenticate('twitter');\n *\n * @param {Strategy|String|Array} name\n * @param {Object} options\n * @param {Function} callback\n * @return {Function}\n * @api public\n */\n\n\nmodule.exports = function authenticate(passport, name, options, callback) {\n  if (typeof options == 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  var multi = true; // Cast `name` to an array, allowing authentication to pass through a chain of\n  // strategies.  The first strategy to succeed, redirect, or error will halt\n  // the chain.  Authentication failures will proceed through each strategy in\n  // series, ultimately failing if all strategies fail.\n  //\n  // This is typically used on API endpoints to allow clients to authenticate\n  // using their preferred choice of Basic, Digest, token-based schemes, etc.\n  // It is not feasible to construct a chain of multiple strategies that involve\n  // redirection (for example both Facebook and Twitter), since the first one to\n  // redirect will halt the chain.\n\n  if (!Array.isArray(name)) {\n    name = [name];\n    multi = false;\n  }\n\n  return function authenticate(req, res, next) {\n    req.login = req.logIn = req.logIn || IncomingMessageExt.logIn;\n    req.logout = req.logOut = req.logOut || IncomingMessageExt.logOut;\n    req.isAuthenticated = req.isAuthenticated || IncomingMessageExt.isAuthenticated;\n    req.isUnauthenticated = req.isUnauthenticated || IncomingMessageExt.isUnauthenticated;\n    req._sessionManager = passport._sm; // accumulator for failures from each strategy in the chain\n\n    var failures = [];\n\n    function allFailed() {\n      if (callback) {\n        if (!multi) {\n          return callback(null, false, failures[0].challenge, failures[0].status);\n        } else {\n          var challenges = failures.map(function (f) {\n            return f.challenge;\n          });\n          var statuses = failures.map(function (f) {\n            return f.status;\n          });\n          return callback(null, false, challenges, statuses);\n        }\n      } // Strategies are ordered by priority.  For the purpose of flashing a\n      // message, the first failure will be displayed.\n\n\n      var failure = failures[0] || {},\n          challenge = failure.challenge || {},\n          msg;\n\n      if (options.failureFlash) {\n        var flash = options.failureFlash;\n\n        if (typeof flash == 'string') {\n          flash = {\n            type: 'error',\n            message: flash\n          };\n        }\n\n        flash.type = flash.type || 'error';\n        var type = flash.type || challenge.type || 'error';\n        msg = flash.message || challenge.message || challenge;\n\n        if (typeof msg == 'string') {\n          req.flash(type, msg);\n        }\n      }\n\n      if (options.failureMessage) {\n        msg = options.failureMessage;\n\n        if (typeof msg == 'boolean') {\n          msg = challenge.message || challenge;\n        }\n\n        if (typeof msg == 'string') {\n          req.session.messages = req.session.messages || [];\n          req.session.messages.push(msg);\n        }\n      }\n\n      if (options.failureRedirect) {\n        return res.redirect(options.failureRedirect);\n      } // When failure handling is not delegated to the application, the default\n      // is to respond with 401 Unauthorized.  Note that the WWW-Authenticate\n      // header will be set according to the strategies in use (see\n      // actions#fail).  If multiple strategies failed, each of their challenges\n      // will be included in the response.\n\n\n      var rchallenge = [],\n          rstatus,\n          status;\n\n      for (var j = 0, len = failures.length; j < len; j++) {\n        failure = failures[j];\n        challenge = failure.challenge;\n        status = failure.status;\n        rstatus = rstatus || status;\n\n        if (typeof challenge == 'string') {\n          rchallenge.push(challenge);\n        }\n      }\n\n      res.statusCode = rstatus || 401;\n\n      if (res.statusCode == 401 && rchallenge.length) {\n        res.setHeader('WWW-Authenticate', rchallenge);\n      }\n\n      if (options.failWithError) {\n        return next(new AuthenticationError(http.STATUS_CODES[res.statusCode], rstatus));\n      }\n\n      res.end(http.STATUS_CODES[res.statusCode]);\n    }\n\n    (function attempt(i) {\n      var layer = name[i]; // If no more strategies exist in the chain, authentication has failed.\n\n      if (!layer) {\n        return allFailed();\n      } // Get the strategy, which will be used as prototype from which to create\n      // a new instance.  Action functions will then be bound to the strategy\n      // within the context of the HTTP request/response pair.\n\n\n      var strategy, prototype;\n\n      if (typeof layer.authenticate == 'function') {\n        strategy = layer;\n      } else {\n        prototype = passport._strategy(layer);\n\n        if (!prototype) {\n          return next(new Error('Unknown authentication strategy \"' + layer + '\"'));\n        }\n\n        strategy = Object.create(prototype);\n      } // ----- BEGIN STRATEGY AUGMENTATION -----\n      // Augment the new strategy instance with action functions.  These action\n      // functions are bound via closure the the request/response pair.  The end\n      // goal of the strategy is to invoke *one* of these action methods, in\n      // order to indicate successful or failed authentication, redirect to a\n      // third-party identity provider, etc.\n\n      /**\n       * Authenticate `user`, with optional `info`.\n       *\n       * Strategies should call this function to successfully authenticate a\n       * user.  `user` should be an object supplied by the application after it\n       * has been given an opportunity to verify credentials.  `info` is an\n       * optional argument containing additional user information.  This is\n       * useful for third-party authentication strategies to pass profile\n       * details.\n       *\n       * @param {Object} user\n       * @param {Object} info\n       * @api public\n       */\n\n\n      strategy.success = function (user, info) {\n        if (callback) {\n          return callback(null, user, info);\n        }\n\n        info = info || {};\n        var msg;\n\n        if (options.successFlash) {\n          var flash = options.successFlash;\n\n          if (typeof flash == 'string') {\n            flash = {\n              type: 'success',\n              message: flash\n            };\n          }\n\n          flash.type = flash.type || 'success';\n          var type = flash.type || info.type || 'success';\n          msg = flash.message || info.message || info;\n\n          if (typeof msg == 'string') {\n            req.flash(type, msg);\n          }\n        }\n\n        if (options.successMessage) {\n          msg = options.successMessage;\n\n          if (typeof msg == 'boolean') {\n            msg = info.message || info;\n          }\n\n          if (typeof msg == 'string') {\n            req.session.messages = req.session.messages || [];\n            req.session.messages.push(msg);\n          }\n        }\n\n        if (options.assignProperty) {\n          req[options.assignProperty] = user;\n          return next();\n        }\n\n        req.logIn(user, options, function (err) {\n          if (err) {\n            return next(err);\n          }\n\n          function complete() {\n            if (options.successReturnToOrRedirect) {\n              var url = options.successReturnToOrRedirect;\n\n              if (req.session && req.session.returnTo) {\n                url = req.session.returnTo;\n                delete req.session.returnTo;\n              }\n\n              return res.redirect(url);\n            }\n\n            if (options.successRedirect) {\n              return res.redirect(options.successRedirect);\n            }\n\n            next();\n          }\n\n          if (options.authInfo !== false) {\n            passport.transformAuthInfo(info, req, function (err, tinfo) {\n              if (err) {\n                return next(err);\n              }\n\n              req.authInfo = tinfo;\n              complete();\n            });\n          } else {\n            complete();\n          }\n        });\n      };\n      /**\n       * Fail authentication, with optional `challenge` and `status`, defaulting\n       * to 401.\n       *\n       * Strategies should call this function to fail an authentication attempt.\n       *\n       * @param {String} challenge\n       * @param {Number} status\n       * @api public\n       */\n\n\n      strategy.fail = function (challenge, status) {\n        if (typeof challenge == 'number') {\n          status = challenge;\n          challenge = undefined;\n        } // push this failure into the accumulator and attempt authentication\n        // using the next strategy\n\n\n        failures.push({\n          challenge: challenge,\n          status: status\n        });\n        attempt(i + 1);\n      };\n      /**\n       * Redirect to `url` with optional `status`, defaulting to 302.\n       *\n       * Strategies should call this function to redirect the user (via their\n       * user agent) to a third-party website for authentication.\n       *\n       * @param {String} url\n       * @param {Number} status\n       * @api public\n       */\n\n\n      strategy.redirect = function (url, status) {\n        // NOTE: Do not use `res.redirect` from Express, because it can't decide\n        //       what it wants.\n        //\n        //       Express 2.x: res.redirect(url, status)\n        //       Express 3.x: res.redirect(status, url) -OR- res.redirect(url, status)\n        //         - as of 3.14.0, deprecated warnings are issued if res.redirect(url, status)\n        //           is used\n        //       Express 4.x: res.redirect(status, url)\n        //         - all versions (as of 4.8.7) continue to accept res.redirect(url, status)\n        //           but issue deprecated versions\n        res.statusCode = status || 302;\n        res.setHeader('Location', url);\n        res.setHeader('Content-Length', '0');\n        res.end();\n      };\n      /**\n       * Pass without making a success or fail decision.\n       *\n       * Under most circumstances, Strategies should not need to call this\n       * function.  It exists primarily to allow previous authentication state\n       * to be restored, for example from an HTTP session.\n       *\n       * @api public\n       */\n\n\n      strategy.pass = function () {\n        next();\n      };\n      /**\n       * Internal error while performing authentication.\n       *\n       * Strategies should call this function when an internal error occurs\n       * during the process of performing authentication; for example, if the\n       * user directory is not available.\n       *\n       * @param {Error} err\n       * @api public\n       */\n\n\n      strategy.error = function (err) {\n        if (callback) {\n          return callback(err);\n        }\n\n        next(err);\n      }; // ----- END STRATEGY AUGMENTATION -----\n\n\n      strategy.authenticate(req, options);\n    })(0); // attempt\n\n  };\n};","map":{"version":3,"names":["http","require","IncomingMessageExt","AuthenticationError","module","exports","authenticate","passport","name","options","callback","multi","Array","isArray","req","res","next","login","logIn","logout","logOut","isAuthenticated","isUnauthenticated","_sessionManager","_sm","failures","allFailed","challenge","status","challenges","map","f","statuses","failure","msg","failureFlash","flash","type","message","failureMessage","session","messages","push","failureRedirect","redirect","rchallenge","rstatus","j","len","length","statusCode","setHeader","failWithError","STATUS_CODES","end","attempt","i","layer","strategy","prototype","_strategy","Error","Object","create","success","user","info","successFlash","successMessage","assignProperty","err","complete","successReturnToOrRedirect","url","returnTo","successRedirect","authInfo","transformAuthInfo","tinfo","fail","undefined","pass","error"],"sources":["/Users/zhanyuanyang/Desktop/react/starter-kit/node_modules/passport/lib/middleware/authenticate.js"],"sourcesContent":["/**\n * Module dependencies.\n */\nvar http = require('http')\n  , IncomingMessageExt = require('../http/request')\n  , AuthenticationError = require('../errors/authenticationerror');\n\n\n/**\n * Authenticates requests.\n *\n * Applies the `name`ed strategy (or strategies) to the incoming request, in\n * order to authenticate the request.  If authentication is successful, the user\n * will be logged in and populated at `req.user` and a session will be\n * established by default.  If authentication fails, an unauthorized response\n * will be sent.\n *\n * Options:\n *   - `session`          Save login state in session, defaults to _true_\n *   - `successRedirect`  After successful login, redirect to given URL\n *   - `successMessage`   True to store success message in\n *                        req.session.messages, or a string to use as override\n *                        message for success.\n *   - `successFlash`     True to flash success messages or a string to use as a flash\n *                        message for success (overrides any from the strategy itself).\n *   - `failureRedirect`  After failed login, redirect to given URL\n *   - `failureMessage`   True to store failure message in\n *                        req.session.messages, or a string to use as override\n *                        message for failure.\n *   - `failureFlash`     True to flash failure messages or a string to use as a flash\n *                        message for failures (overrides any from the strategy itself).\n *   - `assignProperty`   Assign the object provided by the verify callback to given property\n *\n * An optional `callback` can be supplied to allow the application to override\n * the default manner in which authentication attempts are handled.  The\n * callback has the following signature, where `user` will be set to the\n * authenticated user on a successful authentication attempt, or `false`\n * otherwise.  An optional `info` argument will be passed, containing additional\n * details provided by the strategy's verify callback - this could be information about\n * a successful authentication or a challenge message for a failed authentication.\n * An optional `status` argument will be passed when authentication fails - this could\n * be a HTTP response code for a remote authentication failure or similar.\n *\n *     app.get('/protected', function(req, res, next) {\n *       passport.authenticate('local', function(err, user, info, status) {\n *         if (err) { return next(err) }\n *         if (!user) { return res.redirect('/signin') }\n *         res.redirect('/account');\n *       })(req, res, next);\n *     });\n *\n * Note that if a callback is supplied, it becomes the application's\n * responsibility to log-in the user, establish a session, and otherwise perform\n * the desired operations.\n *\n * Examples:\n *\n *     passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' });\n *\n *     passport.authenticate('basic', { session: false });\n *\n *     passport.authenticate('twitter');\n *\n * @param {Strategy|String|Array} name\n * @param {Object} options\n * @param {Function} callback\n * @return {Function}\n * @api public\n */\nmodule.exports = function authenticate(passport, name, options, callback) {\n  if (typeof options == 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  \n  var multi = true;\n  \n  // Cast `name` to an array, allowing authentication to pass through a chain of\n  // strategies.  The first strategy to succeed, redirect, or error will halt\n  // the chain.  Authentication failures will proceed through each strategy in\n  // series, ultimately failing if all strategies fail.\n  //\n  // This is typically used on API endpoints to allow clients to authenticate\n  // using their preferred choice of Basic, Digest, token-based schemes, etc.\n  // It is not feasible to construct a chain of multiple strategies that involve\n  // redirection (for example both Facebook and Twitter), since the first one to\n  // redirect will halt the chain.\n  if (!Array.isArray(name)) {\n    name = [ name ];\n    multi = false;\n  }\n  \n  return function authenticate(req, res, next) {\n    req.login =\n    req.logIn = req.logIn || IncomingMessageExt.logIn;\n    req.logout =\n    req.logOut = req.logOut || IncomingMessageExt.logOut;\n    req.isAuthenticated = req.isAuthenticated || IncomingMessageExt.isAuthenticated;\n    req.isUnauthenticated = req.isUnauthenticated || IncomingMessageExt.isUnauthenticated;\n    \n    req._sessionManager = passport._sm;\n    \n    // accumulator for failures from each strategy in the chain\n    var failures = [];\n    \n    function allFailed() {\n      if (callback) {\n        if (!multi) {\n          return callback(null, false, failures[0].challenge, failures[0].status);\n        } else {\n          var challenges = failures.map(function(f) { return f.challenge; });\n          var statuses = failures.map(function(f) { return f.status; });\n          return callback(null, false, challenges, statuses);\n        }\n      }\n      \n      // Strategies are ordered by priority.  For the purpose of flashing a\n      // message, the first failure will be displayed.\n      var failure = failures[0] || {}\n        , challenge = failure.challenge || {}\n        , msg;\n    \n      if (options.failureFlash) {\n        var flash = options.failureFlash;\n        if (typeof flash == 'string') {\n          flash = { type: 'error', message: flash };\n        }\n        flash.type = flash.type || 'error';\n      \n        var type = flash.type || challenge.type || 'error';\n        msg = flash.message || challenge.message || challenge;\n        if (typeof msg == 'string') {\n          req.flash(type, msg);\n        }\n      }\n      if (options.failureMessage) {\n        msg = options.failureMessage;\n        if (typeof msg == 'boolean') {\n          msg = challenge.message || challenge;\n        }\n        if (typeof msg == 'string') {\n          req.session.messages = req.session.messages || [];\n          req.session.messages.push(msg);\n        }\n      }\n      if (options.failureRedirect) {\n        return res.redirect(options.failureRedirect);\n      }\n    \n      // When failure handling is not delegated to the application, the default\n      // is to respond with 401 Unauthorized.  Note that the WWW-Authenticate\n      // header will be set according to the strategies in use (see\n      // actions#fail).  If multiple strategies failed, each of their challenges\n      // will be included in the response.\n      var rchallenge = []\n        , rstatus, status;\n      \n      for (var j = 0, len = failures.length; j < len; j++) {\n        failure = failures[j];\n        challenge = failure.challenge;\n        status = failure.status;\n          \n        rstatus = rstatus || status;\n        if (typeof challenge == 'string') {\n          rchallenge.push(challenge);\n        }\n      }\n    \n      res.statusCode = rstatus || 401;\n      if (res.statusCode == 401 && rchallenge.length) {\n        res.setHeader('WWW-Authenticate', rchallenge);\n      }\n      if (options.failWithError) {\n        return next(new AuthenticationError(http.STATUS_CODES[res.statusCode], rstatus));\n      }\n      res.end(http.STATUS_CODES[res.statusCode]);\n    }\n    \n    (function attempt(i) {\n      var layer = name[i];\n      // If no more strategies exist in the chain, authentication has failed.\n      if (!layer) { return allFailed(); }\n    \n      // Get the strategy, which will be used as prototype from which to create\n      // a new instance.  Action functions will then be bound to the strategy\n      // within the context of the HTTP request/response pair.\n      var strategy, prototype;\n      if (typeof layer.authenticate == 'function') {\n        strategy = layer;\n      } else {\n        prototype = passport._strategy(layer);\n        if (!prototype) { return next(new Error('Unknown authentication strategy \"' + layer + '\"')); }\n        \n        strategy = Object.create(prototype);\n      }\n      \n      \n      // ----- BEGIN STRATEGY AUGMENTATION -----\n      // Augment the new strategy instance with action functions.  These action\n      // functions are bound via closure the the request/response pair.  The end\n      // goal of the strategy is to invoke *one* of these action methods, in\n      // order to indicate successful or failed authentication, redirect to a\n      // third-party identity provider, etc.\n      \n      /**\n       * Authenticate `user`, with optional `info`.\n       *\n       * Strategies should call this function to successfully authenticate a\n       * user.  `user` should be an object supplied by the application after it\n       * has been given an opportunity to verify credentials.  `info` is an\n       * optional argument containing additional user information.  This is\n       * useful for third-party authentication strategies to pass profile\n       * details.\n       *\n       * @param {Object} user\n       * @param {Object} info\n       * @api public\n       */\n      strategy.success = function(user, info) {\n        if (callback) {\n          return callback(null, user, info);\n        }\n      \n        info = info || {};\n        var msg;\n      \n        if (options.successFlash) {\n          var flash = options.successFlash;\n          if (typeof flash == 'string') {\n            flash = { type: 'success', message: flash };\n          }\n          flash.type = flash.type || 'success';\n        \n          var type = flash.type || info.type || 'success';\n          msg = flash.message || info.message || info;\n          if (typeof msg == 'string') {\n            req.flash(type, msg);\n          }\n        }\n        if (options.successMessage) {\n          msg = options.successMessage;\n          if (typeof msg == 'boolean') {\n            msg = info.message || info;\n          }\n          if (typeof msg == 'string') {\n            req.session.messages = req.session.messages || [];\n            req.session.messages.push(msg);\n          }\n        }\n        if (options.assignProperty) {\n          req[options.assignProperty] = user;\n          return next();\n        }\n      \n        req.logIn(user, options, function(err) {\n          if (err) { return next(err); }\n          \n          function complete() {\n            if (options.successReturnToOrRedirect) {\n              var url = options.successReturnToOrRedirect;\n              if (req.session && req.session.returnTo) {\n                url = req.session.returnTo;\n                delete req.session.returnTo;\n              }\n              return res.redirect(url);\n            }\n            if (options.successRedirect) {\n              return res.redirect(options.successRedirect);\n            }\n            next();\n          }\n          \n          if (options.authInfo !== false) {\n            passport.transformAuthInfo(info, req, function(err, tinfo) {\n              if (err) { return next(err); }\n              req.authInfo = tinfo;\n              complete();\n            });\n          } else {\n            complete();\n          }\n        });\n      };\n      \n      /**\n       * Fail authentication, with optional `challenge` and `status`, defaulting\n       * to 401.\n       *\n       * Strategies should call this function to fail an authentication attempt.\n       *\n       * @param {String} challenge\n       * @param {Number} status\n       * @api public\n       */\n      strategy.fail = function(challenge, status) {\n        if (typeof challenge == 'number') {\n          status = challenge;\n          challenge = undefined;\n        }\n        \n        // push this failure into the accumulator and attempt authentication\n        // using the next strategy\n        failures.push({ challenge: challenge, status: status });\n        attempt(i + 1);\n      };\n      \n      /**\n       * Redirect to `url` with optional `status`, defaulting to 302.\n       *\n       * Strategies should call this function to redirect the user (via their\n       * user agent) to a third-party website for authentication.\n       *\n       * @param {String} url\n       * @param {Number} status\n       * @api public\n       */\n      strategy.redirect = function(url, status) {\n        // NOTE: Do not use `res.redirect` from Express, because it can't decide\n        //       what it wants.\n        //\n        //       Express 2.x: res.redirect(url, status)\n        //       Express 3.x: res.redirect(status, url) -OR- res.redirect(url, status)\n        //         - as of 3.14.0, deprecated warnings are issued if res.redirect(url, status)\n        //           is used\n        //       Express 4.x: res.redirect(status, url)\n        //         - all versions (as of 4.8.7) continue to accept res.redirect(url, status)\n        //           but issue deprecated versions\n        \n        res.statusCode = status || 302;\n        res.setHeader('Location', url);\n        res.setHeader('Content-Length', '0');\n        res.end();\n      };\n      \n      /**\n       * Pass without making a success or fail decision.\n       *\n       * Under most circumstances, Strategies should not need to call this\n       * function.  It exists primarily to allow previous authentication state\n       * to be restored, for example from an HTTP session.\n       *\n       * @api public\n       */\n      strategy.pass = function() {\n        next();\n      };\n      \n      /**\n       * Internal error while performing authentication.\n       *\n       * Strategies should call this function when an internal error occurs\n       * during the process of performing authentication; for example, if the\n       * user directory is not available.\n       *\n       * @param {Error} err\n       * @api public\n       */\n      strategy.error = function(err) {\n        if (callback) {\n          return callback(err);\n        }\n        \n        next(err);\n      };\n      \n      // ----- END STRATEGY AUGMENTATION -----\n    \n      strategy.authenticate(req, options);\n    })(0); // attempt\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}