{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar SessionStrategy = require('./strategies/session'),\n    SessionManager = require('./sessionmanager');\n/**\n * `Authenticator` constructor.\n *\n * @api public\n */\n\n\nfunction Authenticator() {\n  this._key = 'passport';\n  this._strategies = {};\n  this._serializers = [];\n  this._deserializers = [];\n  this._infoTransformers = [];\n  this._framework = null;\n  this.init();\n}\n/**\n * Initialize authenticator.\n *\n * @api protected\n */\n\n\nAuthenticator.prototype.init = function () {\n  this.framework(require('./framework/connect')());\n  this.use(new SessionStrategy({\n    key: this._key\n  }, this.deserializeUser.bind(this)));\n  this._sm = new SessionManager({\n    key: this._key\n  }, this.serializeUser.bind(this));\n};\n/**\n * Utilize the given `strategy` with optional `name`, overridding the strategy's\n * default name.\n *\n * Examples:\n *\n *     passport.use(new TwitterStrategy(...));\n *\n *     passport.use('api', new http.BasicStrategy(...));\n *\n * @param {String|Strategy} name\n * @param {Strategy} strategy\n * @return {Authenticator} for chaining\n * @api public\n */\n\n\nAuthenticator.prototype.use = function (name, strategy) {\n  if (!strategy) {\n    strategy = name;\n    name = strategy.name;\n  }\n\n  if (!name) {\n    throw new Error('Authentication strategies must have a name');\n  }\n\n  this._strategies[name] = strategy;\n  return this;\n};\n/**\n * Un-utilize the `strategy` with given `name`.\n *\n * In typical applications, the necessary authentication strategies are static,\n * configured once and always available.  As such, there is often no need to\n * invoke this function.\n *\n * However, in certain situations, applications may need dynamically configure\n * and de-configure authentication strategies.  The `use()`/`unuse()`\n * combination satisfies these scenarios.\n *\n * Examples:\n *\n *     passport.unuse('legacy-api');\n *\n * @param {String} name\n * @return {Authenticator} for chaining\n * @api public\n */\n\n\nAuthenticator.prototype.unuse = function (name) {\n  delete this._strategies[name];\n  return this;\n};\n/**\n * Setup Passport to be used under framework.\n *\n * By default, Passport exposes middleware that operate using Connect-style\n * middleware using a `fn(req, res, next)` signature.  Other popular frameworks\n * have different expectations, and this function allows Passport to be adapted\n * to operate within such environments.\n *\n * If you are using a Connect-compatible framework, including Express, there is\n * no need to invoke this function.\n *\n * Examples:\n *\n *     passport.framework(require('hapi-passport')());\n *\n * @param {Object} name\n * @return {Authenticator} for chaining\n * @api public\n */\n\n\nAuthenticator.prototype.framework = function (fw) {\n  this._framework = fw;\n  return this;\n};\n/**\n * Passport's primary initialization middleware.\n *\n * This middleware must be in use by the Connect/Express application for\n * Passport to operate.\n *\n * Options:\n *   - `userProperty`  Property to set on `req` upon login, defaults to _user_\n *\n * Examples:\n *\n *     app.use(passport.initialize());\n *\n *     app.use(passport.initialize({ userProperty: 'currentUser' }));\n *\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\n\n\nAuthenticator.prototype.initialize = function (options) {\n  options = options || {};\n  return this._framework.initialize(this, options);\n};\n/**\n * Middleware that will authenticate a request using the given `strategy` name,\n * with optional `options` and `callback`.\n *\n * Examples:\n *\n *     passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' })(req, res);\n *\n *     passport.authenticate('local', function(err, user) {\n *       if (!user) { return res.redirect('/login'); }\n *       res.end('Authenticated!');\n *     })(req, res);\n *\n *     passport.authenticate('basic', { session: false })(req, res);\n *\n *     app.get('/auth/twitter', passport.authenticate('twitter'), function(req, res) {\n *       // request will be redirected to Twitter\n *     });\n *     app.get('/auth/twitter/callback', passport.authenticate('twitter'), function(req, res) {\n *       res.json(req.user);\n *     });\n *\n * @param {String} strategy\n * @param {Object} options\n * @param {Function} callback\n * @return {Function} middleware\n * @api public\n */\n\n\nAuthenticator.prototype.authenticate = function (strategy, options, callback) {\n  return this._framework.authenticate(this, strategy, options, callback);\n};\n/**\n * Middleware that will authorize a third-party account using the given\n * `strategy` name, with optional `options`.\n *\n * If authorization is successful, the result provided by the strategy's verify\n * callback will be assigned to `req.account`.  The existing login session and\n * `req.user` will be unaffected.\n *\n * This function is particularly useful when connecting third-party accounts\n * to the local account of a user that is currently authenticated.\n *\n * Examples:\n *\n *    passport.authorize('twitter-authz', { failureRedirect: '/account' });\n *\n * @param {String} strategy\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\n\n\nAuthenticator.prototype.authorize = function (strategy, options, callback) {\n  options = options || {};\n  options.assignProperty = 'account';\n  var fn = this._framework.authorize || this._framework.authenticate;\n  return fn(this, strategy, options, callback);\n};\n/**\n * Middleware that will restore login state from a session.\n *\n * Web applications typically use sessions to maintain login state between\n * requests.  For example, a user will authenticate by entering credentials into\n * a form which is submitted to the server.  If the credentials are valid, a\n * login session is established by setting a cookie containing a session\n * identifier in the user's web browser.  The web browser will send this cookie\n * in subsequent requests to the server, allowing a session to be maintained.\n *\n * If sessions are being utilized, and a login session has been established,\n * this middleware will populate `req.user` with the current user.\n *\n * Note that sessions are not strictly required for Passport to operate.\n * However, as a general rule, most web applications will make use of sessions.\n * An exception to this rule would be an API server, which expects each HTTP\n * request to provide credentials in an Authorization header.\n *\n * Examples:\n *\n *     app.use(connect.cookieParser());\n *     app.use(connect.session({ secret: 'keyboard cat' }));\n *     app.use(passport.initialize());\n *     app.use(passport.session());\n *\n * Options:\n *   - `pauseStream`      Pause the request stream before deserializing the user\n *                        object from the session.  Defaults to _false_.  Should\n *                        be set to true in cases where middleware consuming the\n *                        request body is configured after passport and the\n *                        deserializeUser method is asynchronous.\n *\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\n\n\nAuthenticator.prototype.session = function (options) {\n  return this.authenticate('session', options);\n}; // TODO: Make session manager pluggable\n\n/*\nAuthenticator.prototype.sessionManager = function(mgr) {\n  this._sm = mgr;\n  return this;\n}\n*/\n\n/**\n * Registers a function used to serialize user objects into the session.\n *\n * Examples:\n *\n *     passport.serializeUser(function(user, done) {\n *       done(null, user.id);\n *     });\n *\n * @api public\n */\n\n\nAuthenticator.prototype.serializeUser = function (fn, req, done) {\n  if (typeof fn === 'function') {\n    return this._serializers.push(fn);\n  } // private implementation that traverses the chain of serializers, attempting\n  // to serialize a user\n\n\n  var user = fn; // For backwards compatibility\n\n  if (typeof req === 'function') {\n    done = req;\n    req = undefined;\n  }\n\n  var stack = this._serializers;\n\n  (function pass(i, err, obj) {\n    // serializers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    } // an error or serialized object was obtained, done\n\n\n    if (err || obj || obj === 0) {\n      return done(err, obj);\n    }\n\n    var layer = stack[i];\n\n    if (!layer) {\n      return done(new Error('Failed to serialize user into session'));\n    }\n\n    function serialized(e, o) {\n      pass(i + 1, e, o);\n    }\n\n    try {\n      var arity = layer.length;\n\n      if (arity == 3) {\n        layer(req, user, serialized);\n      } else {\n        layer(user, serialized);\n      }\n    } catch (e) {\n      return done(e);\n    }\n  })(0);\n};\n/**\n * Registers a function used to deserialize user objects out of the session.\n *\n * Examples:\n *\n *     passport.deserializeUser(function(id, done) {\n *       User.findById(id, function (err, user) {\n *         done(err, user);\n *       });\n *     });\n *\n * @api public\n */\n\n\nAuthenticator.prototype.deserializeUser = function (fn, req, done) {\n  if (typeof fn === 'function') {\n    return this._deserializers.push(fn);\n  } // private implementation that traverses the chain of deserializers,\n  // attempting to deserialize a user\n\n\n  var obj = fn; // For backwards compatibility\n\n  if (typeof req === 'function') {\n    done = req;\n    req = undefined;\n  }\n\n  var stack = this._deserializers;\n\n  (function pass(i, err, user) {\n    // deserializers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    } // an error or deserialized user was obtained, done\n\n\n    if (err || user) {\n      return done(err, user);\n    } // a valid user existed when establishing the session, but that user has\n    // since been removed\n\n\n    if (user === null || user === false) {\n      return done(null, false);\n    }\n\n    var layer = stack[i];\n\n    if (!layer) {\n      return done(new Error('Failed to deserialize user out of session'));\n    }\n\n    function deserialized(e, u) {\n      pass(i + 1, e, u);\n    }\n\n    try {\n      var arity = layer.length;\n\n      if (arity == 3) {\n        layer(req, obj, deserialized);\n      } else {\n        layer(obj, deserialized);\n      }\n    } catch (e) {\n      return done(e);\n    }\n  })(0);\n};\n/**\n * Registers a function used to transform auth info.\n *\n * In some circumstances authorization details are contained in authentication\n * credentials or loaded as part of verification.\n *\n * For example, when using bearer tokens for API authentication, the tokens may\n * encode (either directly or indirectly in a database), details such as scope\n * of access or the client to which the token was issued.\n *\n * Such authorization details should be enforced separately from authentication.\n * Because Passport deals only with the latter, this is the responsiblity of\n * middleware or routes further along the chain.  However, it is not optimal to\n * decode the same data or execute the same database query later.  To avoid\n * this, Passport accepts optional `info` along with the authenticated `user`\n * in a strategy's `success()` action.  This info is set at `req.authInfo`,\n * where said later middlware or routes can access it.\n *\n * Optionally, applications can register transforms to proccess this info,\n * which take effect prior to `req.authInfo` being set.  This is useful, for\n * example, when the info contains a client ID.  The transform can load the\n * client from the database and include the instance in the transformed info,\n * allowing the full set of client properties to be convieniently accessed.\n *\n * If no transforms are registered, `info` supplied by the strategy will be left\n * unmodified.\n *\n * Examples:\n *\n *     passport.transformAuthInfo(function(info, done) {\n *       Client.findById(info.clientID, function (err, client) {\n *         info.client = client;\n *         done(err, info);\n *       });\n *     });\n *\n * @api public\n */\n\n\nAuthenticator.prototype.transformAuthInfo = function (fn, req, done) {\n  if (typeof fn === 'function') {\n    return this._infoTransformers.push(fn);\n  } // private implementation that traverses the chain of transformers,\n  // attempting to transform auth info\n\n\n  var info = fn; // For backwards compatibility\n\n  if (typeof req === 'function') {\n    done = req;\n    req = undefined;\n  }\n\n  var stack = this._infoTransformers;\n\n  (function pass(i, err, tinfo) {\n    // transformers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    } // an error or transformed info was obtained, done\n\n\n    if (err || tinfo) {\n      return done(err, tinfo);\n    }\n\n    var layer = stack[i];\n\n    if (!layer) {\n      // if no transformers are registered (or they all pass), the default\n      // behavior is to use the un-transformed info as-is\n      return done(null, info);\n    }\n\n    function transformed(e, t) {\n      pass(i + 1, e, t);\n    }\n\n    try {\n      var arity = layer.length;\n\n      if (arity == 1) {\n        // sync\n        var t = layer(info);\n        transformed(null, t);\n      } else if (arity == 3) {\n        layer(req, info, transformed);\n      } else {\n        layer(info, transformed);\n      }\n    } catch (e) {\n      return done(e);\n    }\n  })(0);\n};\n/**\n * Return strategy with given `name`. \n *\n * @param {String} name\n * @return {Strategy}\n * @api private\n */\n\n\nAuthenticator.prototype._strategy = function (name) {\n  return this._strategies[name];\n};\n/**\n * Expose `Authenticator`.\n */\n\n\nmodule.exports = Authenticator;","map":{"version":3,"names":["SessionStrategy","require","SessionManager","Authenticator","_key","_strategies","_serializers","_deserializers","_infoTransformers","_framework","init","prototype","framework","use","key","deserializeUser","bind","_sm","serializeUser","name","strategy","Error","unuse","fw","initialize","options","authenticate","callback","authorize","assignProperty","fn","session","req","done","push","user","undefined","stack","pass","i","err","obj","layer","serialized","e","o","arity","length","deserialized","u","transformAuthInfo","info","tinfo","transformed","t","_strategy","module","exports"],"sources":["/Users/zhanyuanyang/Desktop/react/starter-kit/node_modules/passport/lib/authenticator.js"],"sourcesContent":["/**\n * Module dependencies.\n */\nvar SessionStrategy = require('./strategies/session')\n  , SessionManager = require('./sessionmanager');\n\n\n/**\n * `Authenticator` constructor.\n *\n * @api public\n */\nfunction Authenticator() {\n  this._key = 'passport';\n  this._strategies = {};\n  this._serializers = [];\n  this._deserializers = [];\n  this._infoTransformers = [];\n  this._framework = null;\n  \n  this.init();\n}\n\n/**\n * Initialize authenticator.\n *\n * @api protected\n */\nAuthenticator.prototype.init = function() {\n  this.framework(require('./framework/connect')());\n  this.use(new SessionStrategy({ key: this._key }, this.deserializeUser.bind(this)));\n  this._sm = new SessionManager({ key: this._key }, this.serializeUser.bind(this));\n};\n\n/**\n * Utilize the given `strategy` with optional `name`, overridding the strategy's\n * default name.\n *\n * Examples:\n *\n *     passport.use(new TwitterStrategy(...));\n *\n *     passport.use('api', new http.BasicStrategy(...));\n *\n * @param {String|Strategy} name\n * @param {Strategy} strategy\n * @return {Authenticator} for chaining\n * @api public\n */\nAuthenticator.prototype.use = function(name, strategy) {\n  if (!strategy) {\n    strategy = name;\n    name = strategy.name;\n  }\n  if (!name) { throw new Error('Authentication strategies must have a name'); }\n  \n  this._strategies[name] = strategy;\n  return this;\n};\n\n/**\n * Un-utilize the `strategy` with given `name`.\n *\n * In typical applications, the necessary authentication strategies are static,\n * configured once and always available.  As such, there is often no need to\n * invoke this function.\n *\n * However, in certain situations, applications may need dynamically configure\n * and de-configure authentication strategies.  The `use()`/`unuse()`\n * combination satisfies these scenarios.\n *\n * Examples:\n *\n *     passport.unuse('legacy-api');\n *\n * @param {String} name\n * @return {Authenticator} for chaining\n * @api public\n */\nAuthenticator.prototype.unuse = function(name) {\n  delete this._strategies[name];\n  return this;\n};\n\n/**\n * Setup Passport to be used under framework.\n *\n * By default, Passport exposes middleware that operate using Connect-style\n * middleware using a `fn(req, res, next)` signature.  Other popular frameworks\n * have different expectations, and this function allows Passport to be adapted\n * to operate within such environments.\n *\n * If you are using a Connect-compatible framework, including Express, there is\n * no need to invoke this function.\n *\n * Examples:\n *\n *     passport.framework(require('hapi-passport')());\n *\n * @param {Object} name\n * @return {Authenticator} for chaining\n * @api public\n */\nAuthenticator.prototype.framework = function(fw) {\n  this._framework = fw;\n  return this;\n};\n\n/**\n * Passport's primary initialization middleware.\n *\n * This middleware must be in use by the Connect/Express application for\n * Passport to operate.\n *\n * Options:\n *   - `userProperty`  Property to set on `req` upon login, defaults to _user_\n *\n * Examples:\n *\n *     app.use(passport.initialize());\n *\n *     app.use(passport.initialize({ userProperty: 'currentUser' }));\n *\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nAuthenticator.prototype.initialize = function(options) {\n  options = options || {};\n  return this._framework.initialize(this, options);\n};\n\n/**\n * Middleware that will authenticate a request using the given `strategy` name,\n * with optional `options` and `callback`.\n *\n * Examples:\n *\n *     passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' })(req, res);\n *\n *     passport.authenticate('local', function(err, user) {\n *       if (!user) { return res.redirect('/login'); }\n *       res.end('Authenticated!');\n *     })(req, res);\n *\n *     passport.authenticate('basic', { session: false })(req, res);\n *\n *     app.get('/auth/twitter', passport.authenticate('twitter'), function(req, res) {\n *       // request will be redirected to Twitter\n *     });\n *     app.get('/auth/twitter/callback', passport.authenticate('twitter'), function(req, res) {\n *       res.json(req.user);\n *     });\n *\n * @param {String} strategy\n * @param {Object} options\n * @param {Function} callback\n * @return {Function} middleware\n * @api public\n */\nAuthenticator.prototype.authenticate = function(strategy, options, callback) {\n  return this._framework.authenticate(this, strategy, options, callback);\n};\n\n/**\n * Middleware that will authorize a third-party account using the given\n * `strategy` name, with optional `options`.\n *\n * If authorization is successful, the result provided by the strategy's verify\n * callback will be assigned to `req.account`.  The existing login session and\n * `req.user` will be unaffected.\n *\n * This function is particularly useful when connecting third-party accounts\n * to the local account of a user that is currently authenticated.\n *\n * Examples:\n *\n *    passport.authorize('twitter-authz', { failureRedirect: '/account' });\n *\n * @param {String} strategy\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nAuthenticator.prototype.authorize = function(strategy, options, callback) {\n  options = options || {};\n  options.assignProperty = 'account';\n  \n  var fn = this._framework.authorize || this._framework.authenticate;\n  return fn(this, strategy, options, callback);\n};\n\n/**\n * Middleware that will restore login state from a session.\n *\n * Web applications typically use sessions to maintain login state between\n * requests.  For example, a user will authenticate by entering credentials into\n * a form which is submitted to the server.  If the credentials are valid, a\n * login session is established by setting a cookie containing a session\n * identifier in the user's web browser.  The web browser will send this cookie\n * in subsequent requests to the server, allowing a session to be maintained.\n *\n * If sessions are being utilized, and a login session has been established,\n * this middleware will populate `req.user` with the current user.\n *\n * Note that sessions are not strictly required for Passport to operate.\n * However, as a general rule, most web applications will make use of sessions.\n * An exception to this rule would be an API server, which expects each HTTP\n * request to provide credentials in an Authorization header.\n *\n * Examples:\n *\n *     app.use(connect.cookieParser());\n *     app.use(connect.session({ secret: 'keyboard cat' }));\n *     app.use(passport.initialize());\n *     app.use(passport.session());\n *\n * Options:\n *   - `pauseStream`      Pause the request stream before deserializing the user\n *                        object from the session.  Defaults to _false_.  Should\n *                        be set to true in cases where middleware consuming the\n *                        request body is configured after passport and the\n *                        deserializeUser method is asynchronous.\n *\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nAuthenticator.prototype.session = function(options) {\n  return this.authenticate('session', options);\n};\n\n// TODO: Make session manager pluggable\n/*\nAuthenticator.prototype.sessionManager = function(mgr) {\n  this._sm = mgr;\n  return this;\n}\n*/\n\n/**\n * Registers a function used to serialize user objects into the session.\n *\n * Examples:\n *\n *     passport.serializeUser(function(user, done) {\n *       done(null, user.id);\n *     });\n *\n * @api public\n */\nAuthenticator.prototype.serializeUser = function(fn, req, done) {\n  if (typeof fn === 'function') {\n    return this._serializers.push(fn);\n  }\n  \n  // private implementation that traverses the chain of serializers, attempting\n  // to serialize a user\n  var user = fn;\n\n  // For backwards compatibility\n  if (typeof req === 'function') {\n    done = req;\n    req = undefined;\n  }\n  \n  var stack = this._serializers;\n  (function pass(i, err, obj) {\n    // serializers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or serialized object was obtained, done\n    if (err || obj || obj === 0) { return done(err, obj); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      return done(new Error('Failed to serialize user into session'));\n    }\n    \n    \n    function serialized(e, o) {\n      pass(i + 1, e, o);\n    }\n    \n    try {\n      var arity = layer.length;\n      if (arity == 3) {\n        layer(req, user, serialized);\n      } else {\n        layer(user, serialized);\n      }\n    } catch(e) {\n      return done(e);\n    }\n  })(0);\n};\n\n/**\n * Registers a function used to deserialize user objects out of the session.\n *\n * Examples:\n *\n *     passport.deserializeUser(function(id, done) {\n *       User.findById(id, function (err, user) {\n *         done(err, user);\n *       });\n *     });\n *\n * @api public\n */\nAuthenticator.prototype.deserializeUser = function(fn, req, done) {\n  if (typeof fn === 'function') {\n    return this._deserializers.push(fn);\n  }\n  \n  // private implementation that traverses the chain of deserializers,\n  // attempting to deserialize a user\n  var obj = fn;\n\n  // For backwards compatibility\n  if (typeof req === 'function') {\n    done = req;\n    req = undefined;\n  }\n  \n  var stack = this._deserializers;\n  (function pass(i, err, user) {\n    // deserializers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or deserialized user was obtained, done\n    if (err || user) { return done(err, user); }\n    // a valid user existed when establishing the session, but that user has\n    // since been removed\n    if (user === null || user === false) { return done(null, false); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      return done(new Error('Failed to deserialize user out of session'));\n    }\n    \n    \n    function deserialized(e, u) {\n      pass(i + 1, e, u);\n    }\n    \n    try {\n      var arity = layer.length;\n      if (arity == 3) {\n        layer(req, obj, deserialized);\n      } else {\n        layer(obj, deserialized);\n      }\n    } catch(e) {\n      return done(e);\n    }\n  })(0);\n};\n\n/**\n * Registers a function used to transform auth info.\n *\n * In some circumstances authorization details are contained in authentication\n * credentials or loaded as part of verification.\n *\n * For example, when using bearer tokens for API authentication, the tokens may\n * encode (either directly or indirectly in a database), details such as scope\n * of access or the client to which the token was issued.\n *\n * Such authorization details should be enforced separately from authentication.\n * Because Passport deals only with the latter, this is the responsiblity of\n * middleware or routes further along the chain.  However, it is not optimal to\n * decode the same data or execute the same database query later.  To avoid\n * this, Passport accepts optional `info` along with the authenticated `user`\n * in a strategy's `success()` action.  This info is set at `req.authInfo`,\n * where said later middlware or routes can access it.\n *\n * Optionally, applications can register transforms to proccess this info,\n * which take effect prior to `req.authInfo` being set.  This is useful, for\n * example, when the info contains a client ID.  The transform can load the\n * client from the database and include the instance in the transformed info,\n * allowing the full set of client properties to be convieniently accessed.\n *\n * If no transforms are registered, `info` supplied by the strategy will be left\n * unmodified.\n *\n * Examples:\n *\n *     passport.transformAuthInfo(function(info, done) {\n *       Client.findById(info.clientID, function (err, client) {\n *         info.client = client;\n *         done(err, info);\n *       });\n *     });\n *\n * @api public\n */\nAuthenticator.prototype.transformAuthInfo = function(fn, req, done) {\n  if (typeof fn === 'function') {\n    return this._infoTransformers.push(fn);\n  }\n  \n  // private implementation that traverses the chain of transformers,\n  // attempting to transform auth info\n  var info = fn;\n\n  // For backwards compatibility\n  if (typeof req === 'function') {\n    done = req;\n    req = undefined;\n  }\n  \n  var stack = this._infoTransformers;\n  (function pass(i, err, tinfo) {\n    // transformers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or transformed info was obtained, done\n    if (err || tinfo) { return done(err, tinfo); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      // if no transformers are registered (or they all pass), the default\n      // behavior is to use the un-transformed info as-is\n      return done(null, info);\n    }\n    \n    \n    function transformed(e, t) {\n      pass(i + 1, e, t);\n    }\n    \n    try {\n      var arity = layer.length;\n      if (arity == 1) {\n        // sync\n        var t = layer(info);\n        transformed(null, t);\n      } else if (arity == 3) {\n        layer(req, info, transformed);\n      } else {\n        layer(info, transformed);\n      }\n    } catch(e) {\n      return done(e);\n    }\n  })(0);\n};\n\n/**\n * Return strategy with given `name`. \n *\n * @param {String} name\n * @return {Strategy}\n * @api private\n */\nAuthenticator.prototype._strategy = function(name) {\n  return this._strategies[name];\n};\n\n\n/**\n * Expose `Authenticator`.\n */\nmodule.exports = Authenticator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}